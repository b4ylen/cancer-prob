import numpy as np
import matplotlib.pyplot as plt

# Hypothetical data for the calc
# Each row represents an example subject with the following attributes:
# [age, smoker (0 or 1), family history of cancer (0 or 1), exposure to hazardous materials (0 or 1), physical activity level (0 to 1)]
data = np.array([
    [25, 0, 0, 0, 0.9],
    [45, 1, 1, 1, 0.2],
    [35, 1, 0, 0, 0.6],
    [55, 0, 1, 1, 0.3],
    [65, 1, 1, 0, 0.1]
])

# The corresponding labels (1 if the subject developed terminal cancer, 0 otherwise)
labels = np.array([0, 1, 0, 1, 1])


# A simple sigmoid function
def sigmoid(x):
    return 1 / (1 + np.exp(-x))


# A logistic regression training function
def logistic_regression(X, y, lr=0.01, epochs=1000):
    weights = np.zeros(X.shape[1])  # Initialize weights as zeros
    bias = 0  # Initialize bias as zero

    for _ in range(epochs):
        # Calculate the linear model (weighted sum)
        linear_model = np.dot(X, weights) + bias
        y_predicted = sigmoid(linear_model)

        # Gradients
        dw = (1 / X.shape[0]) * np.dot(X.T, (y_predicted - y))
        db = (1 / X.shape[0]) * np.sum(y_predicted - y)

        # Update weights and bias
        weights -= lr * dw
        bias -= lr * db

    return weights, bias


# Train the logistic regression model
# Select only age and smoking as features to simplify visualization
features_to_use = data[:, [0, 1]]  # Select Age & Smoker data only
weights, bias = logistic_regression(features_to_use, labels)

# Function to predict the likelihood of developing terminal cancer
def predict_chance(subject, weights, bias):
    linear_model = np.dot(subject, weights) + bias
    probability = sigmoid(linear_model)
    return probability


# Test with a new subject's data (age and smoking)
new_subject = np.array([50, 1])  # 50 years old & a smoker
chances = predict_chance(new_subject, weights, bias)
print(f"Chances of developing terminal cancer: {chances * 100:.2f}%")


# Plotting the data and decision boundary
def plot_data_and_boundary(data, labels, weights, bias):
    plt.figure(figsize=(10, 6))

    # Scatter plot of data points
    for i, label in enumerate(labels):
        if label == 1:
            plt.scatter(data[i, 0], data[i, 1], color='red', label='Cancer' if i == 0 else "")
        else:
            plt.scatter(data[i, 0], data[i, 1], color='green', label='No Cancer' if i == 0 else "")

    # Decision boundary calculation (only for 2D visualization)
    x_values = np.array([np.min(data[:, 0]), np.max(data[:, 0])])
    y_values = -(weights[0] * x_values + bias) / weights[1]  # Solve for decision boundary

    # Plotting the decision boundary
    plt.plot(x_values, y_values, label='Decision Boundary')
    plt.xlabel('Age')
    plt.ylabel('Smoker Status')
    plt.legend()
    plt.title('Cancer Prediction Decision Boundary')
    plt.show()


# Plot the data and decision boundary
plot_data_and_boundary(features_to_use, labels, weights, bias)
